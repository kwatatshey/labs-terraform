name: all-terragrunt

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Environment name'
        required: true
        default: 'development'

  pull_request:
    paths:
      - 'labs/dev/aws/**'
  push:
    paths:
      - 'labs/dev/aws/**'
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  ENVIRONMENT_NAME: dev
  DEBUG: true
  WORKING_DIRECTORY: ./labs/dev/aws
  TERRAFORM_VERSION: 1.9.5
  DEPLOY_ACCOUNT: ${{ vars.DEPLOY_ACCOUNT }}
  PROVISIONER_REGION: ${{ vars.PROVISIONER_REGION }}
  DEPLOYMENT_ROLE_NAME: ${{ vars.DEPLOYMENT_ROLE_NAME }}
  DEPLOYMENT_ROLE_SESSION_NAME: githubactionsession


jobs:
#   setup:
#     runs-on: ubuntu-latest
#     defaults:
#         run:
#           working-directory: ${{ env.WORKING_DIRECTORY }}
#     outputs:
#       matrix: ${{ steps.set-matrix.outputs.matrix }}
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Set matrix for Terraform
#       id: set-matrix
#       run: |
#         echo "matrix={\"folder\":[\".\"]}" >> $GITHUB_OUTPUT

  deploy_in_sbx_platform:
    runs-on: ubuntu-latest
    environment: dev
    # if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    defaults:
        run:
          working-directory: ${{ env.WORKING_DIRECTORY }}    

    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # or any other version you want to use

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
        
      - name: Configure AWS credentials with OIDC assume role
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.DEPLOY_ACCOUNT }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.PROVISIONER_REGION }}
          role-session-name: ${{ env.DEPLOYMENT_ROLE_SESSION_NAME }}

      - name: STS Get Caller Identity After OIDC
        run: aws sts get-caller-identity

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Terragrunt
        run: |
          curl -LO https://github.com/gruntwork-io/terragrunt/releases/download/v0.68.5/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Set KUBE_CONFIG_PATH environment variable
        run: echo "KUBE_CONFIG_PATH=./kubeconfig" >> $GITHUB_ENV

    #   - name: Update Kubeconfig
    #     run: |
    #       aws eks update-kubeconfig --region ${{ env.PROVISIONER_REGION }} --name dbtfDnA-cluster-sbx --kubeconfig ${{ env.KUBE_CONFIG_PATH }}

    #   - name: Kubectl config use-context
    #     run: kubectl --kubeconfig ${{ env.KUBE_CONFIG_PATH }} config use-context arn:aws:eks:${{ env.PROVISIONER_REGION }}:${{ env.DEPLOY_ACCOUNT }}:cluster/dbtfDnA-cluster-sbx

    #   - name: Print current context
    #     run: kubectl --kubeconfig ${{ env.KUBE_CONFIG_PATH }} config current-context

    #   - name: Print current user
    #     run: kubectl --kubeconfig ${{ env.KUBE_CONFIG_PATH }} config view --minify -o jsonpath='{.users[0].user}'

      - name: Terraform Init
        id : tf-init
        run: terragrunt run-all init
        env:
          TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
          TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}

    #   - name: Terraform Validate
    #     id: tf-validate
    #     run: terraform -chdir=${{ matrix.folder }} validate
    #     env:
    #       TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
    #       TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}

    #   - name: Terraform Format
    #     id : tf-format
    #     run: |
    #       terraform -chdir=${{ matrix.folder }} fmt -recursive
    #       terraform -chdir=${{ matrix.folder }} fmt -check
    #     env:
    #       TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
    #       TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}  
          
      # - name: Install TFLint
      #   id: tflint-install
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/bin v0.53.0
      #     echo "$HOME/bin" >> $GITHUB_PATH

      # - name: Terraform Lint
      #   id: tf-lint
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     tflint --init --config $GITHUB_WORKSPACE/.tflint.hcl
      #     tflint --config $GITHUB_WORKSPACE/.tflint.hcl

    #   - name: Terraform Plan
    #     id : tf-plan
    #     if: github.event_name == 'pull_request'
    #     run: terraform -chdir=${{ matrix.folder }} plan -var-file=terraform.${{ env.ENVIRONMENT_NAME }}.tfvars -no-color
    #     continue-on-error: true
    #     env:
    #       TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
    #       TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}  

    #   - name: Terraform Plan Status
    #     id: tf-plan-status
    #     if: steps.plan.outcome == 'failure' && github.event_name == 'pull_request'
    #     run: exit 1
    #     env:
    #       TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
    #       TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}   

    #   - name: Terraform Apply
    #     id : tf-apply
    #     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #     run: terraform -chdir=${{ matrix.folder }} apply -auto-approve -var-file=terraform.${{ env.ENVIRONMENT_NAME }}.tfvars
    #     env:
    #       TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
    #       TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}    
