name: Reusable-Workflow

on: 
    workflow_call:
      inputs:
        environment_name:
          description: 'Environment Name'
          required: true
          default: 'dev'
          type: string
        Organization:
          required: false
          type: string
        Repository:
          required: false
          type: string
        devEnv:
          required: false
          type: string
        uatEnv: 
          required: false
          type: string
        prodEnv:
          required: false
          type: string
        devBranch:
          required: false
          type: string
        uatBranch:
          required: false
          type: string
        prodBranch:
          required: false
          type: string
        rootFolder:
          required: false
          type: string
      secrets:
        SSH_PRIVATE_KEY:
          required: true
          
permissions: 
  id-token: write
  contents: read

env:
  DEBUG: true
  WORKING_DIRECTORY: ./labs/dev/aws
  DEPLOY_ACCOUNT: ${{ vars.DEPLOY_ACCOUNT }}
  PROVISIONER_REGION: ${{ vars.PROVISIONER_REGION }}
  DEPLOYMENT_ROLE_NAME: ${{ vars.DEPLOYMENT_ROLE_NAME }}
  DEPLOYMENT_ROLE_SESSION_NAME: githubactionsession
  TF_ENV_VERSION: 1.9.8
  TG_ENV_VERSION: 0.68.5
  TF_OFU_ENV_VERSION: 1.8.4 # To check all available versions, run `curl -s https://api.github.com/repos/opentofu/opentofu/releases | jq '.[].tag_name'` or check step called "List OpenTofu Releases" below 
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  TF_IN_AUTOMATION: true
  ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name }}
  # TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  reusable-job:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment_name }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:

      - name: Setup Node.js environment
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Install Graphviz
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y graphviz

      - name: Print Directory Structure(Tree)
        uses: jaywcjlove/github-action-folder-tree@main
        id: tree
        with:
          # exclude: "node_modules|dist|.git|.husky"
          path: ${{ env.GITHUB_WORKSPACE }}
          depth: 5
    
      - name: Modify TREE.md
        id: modify-content-tree-md
        uses: jaywcjlove/github-action-modify-file-content@main
        with:
          path: ${{ env.GITHUB_WORKSPACE }}/TREE.md
          body: ${{ steps.tree.outputs.content }}

      - name: create directory to pass ssh-agent socket
        run: "mkdir -p /home/runner/work/_temp/_github_workflow"
        shell: bash

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-auth-sock: "/home/runner/work/_temp/_github_workflow/ssh-agent.sock"

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_ENV_VERSION }}

      - name: Install TFENV
        id: install-tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ${HOME}/.tfenv
          echo 'export PATH="${HOME}/.tfenv/bin:${PATH}"' >> ${HOME}/.bash_profile
          mkdir -p ${HOME}/.local/bin
          ln -s ${HOME}/.tfenv/bin/* ${HOME}/.local/bin
          export PATH="${HOME}/.tfenv/bin:${PATH}"
          . ${HOME}/.profile

      - name: Setup Terraform TFENV
        id: setup-tfenv
        run: |
          tfenv install ${{ env.TF_ENV_VERSION }}
          tfenv use ${{ env.TF_ENV_VERSION }}

      - name: Install Terragrunt
        id: install-terragrunt
        run: |
          curl -LO https://github.com/gruntwork-io/terragrunt/releases/download/v0.68.5/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Install TGENV
        id: install-tgenv
        run: |
          git clone --depth=1 https://github.com/tgenv/tgenv.git ${HOME}/.tgenv
          echo 'export PATH="${HOME}/.tgenv/bin:${PATH}"' >> ${HOME}/.bash_profile
          mkdir -p ${HOME}/.local/bin
          ln -s ${HOME}/.tgenv/bin/* ${HOME}/.local/bin
          export PATH="${HOME}/.tgenv/bin:${PATH}"
          . ${HOME}/.profile

      - name: Setup Terragrunt TGENV
        id: setup-tgenv
        run: |
          tgenv install ${{ env.TG_ENV_VERSION }}
          tgenv use ${{ env.TG_ENV_VERSION }}
  
      - name: Verify Terragrunt Version
        id: verify-terragrunt-version
        run: terragrunt --version   

      - name: Install Kubectl
        id: install-kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Check ENVIRONMENT_NAME
        id: check-environment-name
        run: echo "ENVIRONMENT_NAME=${{ github.event.inputs.environment_name }}"

      - name: Configure AWS Credentials With OIDC Assume Role
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.DEPLOY_ACCOUNT }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.PROVISIONER_REGION }}
          role-session-name: ${{ env.DEPLOYMENT_ROLE_SESSION_NAME }}

      - name: STS Get Caller Identity After OIDC
        id: sts-get-caller-identity
        run: aws sts get-caller-identity

      - name: Set KUBE_CONFIG_PATH environment variable
        id: set-kube-config-path
        run: echo "KUBE_CONFIG_PATH=./kubeconfig" >> $GITHUB_ENV

      - name: List OpenTofu Releases
        id: list-opentofu-releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release list -R opentofu/opentofu

      - name: Terragrunt HCL Format
        id: terragrunt-hcl-format
        uses: gruntwork-io/terragrunt-action@v2
        with:
            # tofu_version: ${{ env.TF_OFU_ENV_VERSION }}
            tf_version: ${{ env.TF_ENV_VERSION }}
            tg_version: ${{ env.TG_ENV_VERSION }}
            tg_dir: ${{ env.WORKING_DIRECTORY }}
            tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

      - name: Find Cluster Name
        id: find_cluster
        run: |
          CLUSTER_NAME=$(aws eks list-clusters --region ${{ env.PROVISIONER_REGION }} --query "clusters[0]" --output text)
          if [ -z "$CLUSTER_NAME" ]; then
            echo "Cluster does not exist"
            echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Cluster exists: $CLUSTER_NAME"
            echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
            echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Update Kubeconfig
        id: update-kubeconfig
        continue-on-error: true
        run: |
          if [ "${{ env.CLUSTER_EXISTS }}" == "true" ]; then
            aws eks update-kubeconfig --region ${{ env.PROVISIONER_REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig ${{ env.KUBE_CONFIG_PATH }}
          else
            echo "Skipping kubeconfig update as the cluster does not exist."
          fi || true

      - name: Kubectl Config Use Context
        id: kubectl-config-use-context
        continue-on-error: true
        run: |
          if [ "${{ env.CLUSTER_EXISTS }}" == "true" ]; then
            kubectl --kubeconfig ${{ env.KUBE_CONFIG_PATH }} config use-context arn:aws:eks:${{ env.PROVISIONER_REGION }}:${{ env.DEPLOY_ACCOUNT }}:cluster/${{ env.CLUSTER_NAME }}
          else
            echo "Skipping kubectl config use-context as the cluster does not exist."
          fi || true
  
      - name: Print Current User
        id: print-current-user
        continue-on-error: true
        run: |
          if [ "${{ env.CLUSTER_EXISTS }}" == "true" ]; then
            kubectl --kubeconfig ${{ env.KUBE_CONFIG_PATH }} config view --minify -o jsonpath='{.users[0].user}'
          else
            echo "Skipping print current user as the cluster does not exist."
          fi || true

      # - name: Create Terraform Plugin Cache Dir
      #   id: create-terraform-plugin-cache-dir
      #   run: mkdir -p $TF_PLUGIN_CACHE_DIR

      # - name: Terraform Plugin Cache
      #   id: terraform-plugin-cache
      #   uses: actions/cache@v4.0.1
      #   with:
      #     path: ${{ env.TF_PLUGIN_CACHE_DIR }}
      #     key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}
          
      - name: Remove Terraform lock file and Terragrunt cache recursively with condition
        id: remove-terraform-lock-file-and-terragrunt-cache
        continue-on-error: true
        run: |
          # Check if any .terraform.lock.hcl files exist and remove them
          if find . -type f -name '.terraform.lock.hcl' | grep -q .; then
            find . -type f -name '.terraform.lock.hcl' -exec rm {} +
            echo "Removed .terraform.lock.hcl files."
          else
            echo ".terraform.lock.hcl files not found."
          fi || true

          # Check if any .terragrunt-cache directories exist and remove them
          if find . -type d -name '.terragrunt-cache' | grep -q .; then
            find . -type d -name '.terragrunt-cache' -exec rm -rf {} +
            echo "Removed .terragrunt-cache directories."
          else
            echo ".terragrunt-cache directories not found."
          fi || true

      - name: Install Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Terragrunt Init
        id: terragrunt-init
        uses: gruntwork-io/terragrunt-action@v2
        with:
          # tofu_version: ${{ env.TF_OFU_ENV_VERSION }}
          tf_version: ${{ env.TF_ENV_VERSION }}
          tg_version: ${{ env.TG_ENV_VERSION }}
          tg_dir: ${{ env.WORKING_DIRECTORY }}
          tg_command: 'run-all init'  
        env:
          TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
          TF_VAR_github_token: ${{ secrets.GIT_TOKEN }} 
          # TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
          INPUT_POST_EXEC_1: |
            # Install Graphviz
            sudo apt-get update
            sudo apt-get install -y graphviz

          INPUT_POST_EXEC_2: |
            # Run the commands in a subshell to avoid readonly variable issues
            (
              # Generate SVG directly from terragrunt graph-dependencies
              terragrunt graph-dependencies --terragrunt-source --terragrunt-non-interactive | dot -Tsvg -Nshape=rect -Gsplines=ortho -o ${GITHUB_WORKSPACE}/graph.svg
              
              if [ $? -ne 0 ]; then
                echo "Failed to generate SVG dependency graph."
                exit 1
              fi || true
              echo "Generated SVG dependency graph."

              # Generate the dependency graph in DOT format
              terragrunt graph-dependencies --terragrunt-source --terragrunt-non-interactive > ${GITHUB_WORKSPACE}/terragrunt-dependency-graph.dot
              echo "Generated dependency graph in DOT format."

              # Git configuration for pushing changes
              git config --local user.name "github-actions[bot]"
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git remote set-url origin git@github.com:${GITHUB_REPOSITORY}.git
              
              # Check if the SVG file exists before adding it to git
              if [ -f ${GITHUB_WORKSPACE}/graph.svg ]; then
                git add ${GITHUB_WORKSPACE}/graph.svg
              else
                echo "File 'graph.svg' does not exist."
              fi || true
              
              # Check if the DOT file exists before adding it to git
              if [ -f ${GITHUB_WORKSPACE}/terragrunt-dependency-graph.dot ]; then
                git add ${GITHUB_WORKSPACE}/terragrunt-dependency-graph.dot
              else
                echo "File 'terragrunt-dependency-graph.dot' does not exist."
              fi || true
              
              git commit -m "Update Terragrunt dependency graph [skip ci]" || echo "No changes to commit"
              git push
            )
          SSH_AUTH_SOCK: "/github/workflow/ssh-agent.sock"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terragrunt Validate
        id: terragrunt-validate
        uses: gruntwork-io/terragrunt-action@v2
        with:
          # tofu_version: ${{ env.TF_OFU_ENV_VERSION }}
          tf_version: ${{ env.TF_ENV_VERSION }}
          tg_version: ${{ env.TG_ENV_VERSION }}
          tg_dir: ${{ env.WORKING_DIRECTORY }}
          tg_command: 'run-all validate'  
        env:
          TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
          TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}
          SSH_AUTH_SOCK: "/github/workflow/ssh-agent.sock"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Terragrunt Plan
        id: terragrunt-plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          # tofu_version: ${{ env.TF_OFU_ENV_VERSION }}
          tf_version: ${{ env.TF_ENV_VERSION }}
          tg_version: ${{ env.TG_ENV_VERSION }}
          tg_dir: ${{ env.WORKING_DIRECTORY }}
          tg_command: 'run-all plan'  
        env:
          TF_VAR_github_username: ${{ secrets.GIT_USERNAME }}
          TF_VAR_github_token: ${{ secrets.GIT_TOKEN }}
          # TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
          SSH_AUTH_SOCK: "/github/workflow/ssh-agent.sock"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
